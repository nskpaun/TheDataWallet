/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from "bignumber.js";

export interface ConvertLibContract
  extends Truffle.Contract<ConvertLibInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ConvertLibInstance>;
}

export interface MetaCoinContract extends Truffle.Contract<MetaCoinInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MetaCoinInstance>;
}

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface TheDataWalletContract
  extends Truffle.Contract<TheDataWalletInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TheDataWalletInstance>;
}

export interface ConvertLibInstance extends Truffle.ContractInstance {
  convert(
    amount: number | BigNumber | string,
    conversionRate: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface MetaCoinInstance extends Truffle.ContractInstance {
  sendCoin: {
    (
      receiver: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      receiver: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      receiver: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      receiver: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBalanceInEth(
    addr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getBalance(
    addr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  last_completed_migration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setCompleted: {
    (
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface TheDataWalletInstance extends Truffle.ContractInstance {
  requestDelta: {
    (
      receiver: string | BigNumber,
      amount: number | BigNumber | string,
      modelJson: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      receiver: string | BigNumber,
      amount: number | BigNumber | string,
      modelJson: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      receiver: string | BigNumber,
      amount: number | BigNumber | string,
      modelJson: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      receiver: string | BigNumber,
      amount: number | BigNumber | string,
      modelJson: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  publishDelta: {
    (
      receiver: string | BigNumber,
      deltaJson: string,
      requestID: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      receiver: string | BigNumber,
      deltaJson: string,
      requestID: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      receiver: string | BigNumber,
      deltaJson: string,
      requestID: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      receiver: string | BigNumber,
      deltaJson: string,
      requestID: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBalance(
    addr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}
